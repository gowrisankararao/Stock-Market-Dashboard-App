<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Market Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <style>
        /* Background Image */
        body {
            background: url('https://img.freepik.com/free-photo/glowing-wave-pattern-futuristic-computer-generated-by-ai_24640-81566.jpg?t=st=1740387181~exp=1740390781~hmac=cdb330090239fa96431b218317cf914bbe303b183b1851913df2f93aa337732c&w=1800') no-repeat center center fixed;
            background-size: cover;
        }

        /* Navbar Styling */
        .navbar {
            background: rgba(0, 0, 0, 0.8);
        }

        /* Stock Ticker Animation */
        .ticker span {
            display: inline-block;
            white-space: nowrap;
            animation: tickerMove 15s linear infinite;
        }

        @keyframes tickerMove {
            from { transform: translateX(100%); }
            to { transform: translateX(calc(-100% - 50px)); }
        }
    </style>
</head>
<body class="text-gray-100 min-h-screen font-poppins">
    
    <!-- Sticky Navbar -->
    <nav class="w-full navbar fixed top-0 left-0 py-3 flex items-center justify-between px-8 shadow-lg z-50">
        <img src="https://static.vecteezy.com/system/resources/thumbnails/016/227/291/small/bull-with-chart-bar-logo-design-finance-logo-design-free-vector.jpg" alt="Stock Market Logo" class="h-12 rounded-lg">
        <div class="ticker text-white overflow-hidden w-3/4 bg-gray-800 px-2 py-1 rounded-md shadow-lg">
            <span>📈 AAPL: $192.34 ▲ +1.2% | 📉 TSLA: $236.75 ▼ -2.5% | 📈 MSFT: $342.89 ▲ +0.8% | 📉 AMZN: $130.44 ▼ -1.1%</span>
        </div>
        <div class="space-x-6 flex items-center">
            <a href="/home" class="hover:text-yellow-400 transition-all duration-300">Home</a>
            <a href="/about" class="hover:text-yellow-400 transition-all duration-300">About</a>
            <a href="/dashboard" class="hover:text-yellow-400 transition-all duration-300">Admin</a>
            <a href="/logout" class="hover:text-red-400 transition-all duration-300">Logout</a>
        </div>
    </nav>

    <!-- Stock Input Section -->
    <div class="flex flex-col items-center mt-24">
        <input id="stockSymbol" class="border-2 border-gray-500 bg-gray-800 text-white p-3 w-80 rounded-lg focus:ring-4 focus:ring-yellow-400 focus:border-yellow-500 shadow-lg transition-all" type="text" placeholder="🔍 Enter Stock Symbol (AAPL, TSLA, etc.)" />
        <button onclick="fetchStockData()" class="mt-4 px-6 py-2 bg-gradient-to-r from-yellow-400 to-red-500 text-white font-bold rounded-lg hover:scale-105 hover:shadow-xl transition-all flex items-center">
            <span class="mr-2">📊 Fetch Stock Data</span>
        </button>
    </div>

    <!-- Stock Data Grid -->
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mt-10 px-6" id="stockData"></div>

    <!-- Stock Chart -->
    <div id="chartContainer" class="mt-6 h-96 w-4/5 mx-auto p-4 bg-gray-800 rounded-lg shadow-lg">
        <canvas id="stockChart"></canvas>
    </div>

    <script>
        let stockChart;

        async function fetchStockData() {
            const symbol = document.getElementById('stockSymbol').value.toUpperCase();
            if (!symbol) return alert('Please enter a stock symbol.');

            try {
                const response = await fetch(`/api/stock/${symbol}`);
                const data = await response.json();
                const stockContainer = document.getElementById('stockData');

                if (data['Time Series (1min)']) {
                    const timeSeries = data['Time Series (1min)'];
                    const timestamps = Object.keys(timeSeries).reverse();
                    const latestTimestamp = timestamps[0];
                    const oldTimestamp = timestamps[1];

                    const latestData = timeSeries[latestTimestamp];
                    const oldData = timeSeries[oldTimestamp];

                    const latestPrice = parseFloat(latestData['1. open']).toFixed(2);
                    const oldPrice = parseFloat(oldData['1. open']).toFixed(2);
                    const volume = latestData['5. volume'];

                    // Calculate price change
                    const priceChange = (latestPrice - oldPrice).toFixed(2);
                    const priceChangePercent = ((priceChange / oldPrice) * 100).toFixed(2);
                    const isPositive = priceChange >= 0;
                    const priceColor = isPositive ? "text-red-400" : "text-green-400";
                    const changeSymbol = isPositive ? "▲" : "▼";

                    stockContainer.innerHTML = `
                        <div class="bg-gray-900 p-4 rounded-lg text-center shadow-lg">
                            <h2 class="text-yellow-400 text-lg font-semibold">${symbol}</h2>
                            <p class="text-xl font-bold">$${latestPrice}</p>
                            <p class="${priceColor}">${changeSymbol} ${priceChange} (${priceChangePercent}%)</p>
                            <p class="text-gray-300">Old Price: $${oldPrice}</p>
                            <p class="text-gray-300">Volume: ${volume}</p>
                        </div>
                    `;

                    // Render Stock Chart
                    renderStockChart(symbol, timestamps, timestamps.map(ts => parseFloat(timeSeries[ts]['1. open'])));
                } else {
                    alert('No data available.');
                }
            } catch (error) {
                alert('Error fetching stock data');
            }
        }

        function renderStockChart(symbol, labels, data) {
            const ctx = document.getElementById('stockChart').getContext('2d');
            if (stockChart) stockChart.destroy();

            const colors = data.map((price, index) => {
                if (index === 0) return 'rgba(75, 192, 75, 1)';
                return price >= data[index - 1] ? 'rgba(75, 192, 75, 1)' : 'rgba(255, 99, 132, 1)';
            });

            stockChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: `Stock Prices for ${symbol}`,
                        data: data,
                        borderColor: colors,
                        pointBackgroundColor: colors,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                        borderWidth: 2,
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: { display: true },
                        y: { display: true, beginAtZero: false }
                    }
                }
            });
        }
    </script>

</body>
</html>
